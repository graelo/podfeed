[package]
name = "podfeed"
version = "0.3.0"
edition = "2024"
rust-version = "1.85.0"
description = "A podcast feed-generator."
readme = "README.md"

license = "MIT OR Apache-2.0"
authors = ["graelo <graelo@grael.cc>"]
repository = "https://github.com/graelo/podfeed"
homepage = "https://github.com/graelo/podfeed"
documentation = "https://docs.rs/podfeed"

keywords = ["podcasts"]
categories = ["command-line-utilities"]
exclude = ["/.github"]

[[bin]]
name = "podfeed"
path = "src/bin/main.rs"

[dependencies]
clap = { version = "4.0.18", features = ["derive", "env"] }
clap_complete = "4.0.3"

thiserror = "2"

regex = "1.7"
# si-scale = "0.2"

futures = "0.3"
async-std = { version = "1", features = ["unstable"] }

# ser/deser
tempfile = "3"
hard-xml = "1"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1"
chrono = "0.4.20"
image = { version = "0.25", features = ["jpeg", "png"] }

[build-dependencies]

[profile.release]
# Enable link-time optimization (LTO). It’s a kind of whole-program or
# inter-module optimization as it runs as the very last step when linking the
# different parts of your binary together. You can think of it as allowing
# better inlining across dependency boundaries (but it’s of course more
# complicated that that).
#
# Rust can use multiple linker flavors, and the one we want is “optimize across
# all crates”, which is called “fat”. To set this, add the lto flag to your
# profile:
lto = "fat"

# To speed up compile times, Rust tries to split your crates into small chunks
# and compile as many in parallel as possible. The downside is that there’s
# less opportunities for the compiler to optimize code across these chunks. So,
# let’s tell it to do one chunk per crate:
codegen-units = 1

# Rust by default uses stack unwinding (on the most common platforms). That
# costs performance, so let’s skip stack traces and the ability to catch panics
# for reduced code size and better cache usage:
panic = "abort"
